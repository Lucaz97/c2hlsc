static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
  {
    {
      k = (i - 1) * 4;
      tempa[0]=RoundKey[k + 0];
      tempa[1]=RoundKey[k + 1];
      tempa[2]=RoundKey[k + 2];
      tempa[3]=RoundKey[k + 3];

    }

    if (i % Nk == 0)
    {
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
        tempa[0] = tempa[1];
        tempa[1] = tempa[2];
        tempa[2] = tempa[3];
        tempa[3] = u8tmp;
      }

      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
    }
    j = i * 4; k=(i - Nk) * 4;
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
  }
}

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
  KeyExpansion(ctx->RoundKey, key);
}


void AddRoundKey_hls(uint8_t round, uint8_t state[4][4], const uint8_t RoundKey[176])
{
    uint8_t i, j;
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j)
        {
            state[i][j] ^= RoundKey[(round * 16) + (i * 4) + j];
        }
    }
}


void SubBytes_hls(uint8_t state[4][4])
{
    uint8_t i, j;
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j)
        {
            state[j][i] = sbox[state[j][i]];
        }
    }
}




static void ShiftRows_hls(uint8_t state[4][4])
{

    uint8_t temp;
    temp = state[0][1];
    state[0][1] = state[1][1];
    state[1][1] = state[2][1];
    state[2][1] = state[3][1];
    state[3][1] = temp;
    
    temp = state[0][2];
    state[0][2] = state[2][2];
    state[2][2] = temp;
    
    temp = state[1][2];
    state[1][2] = state[3][2];
    state[3][2] = temp;
    
    temp = state[0][3];
    state[0][3] = state[3][3];
    state[3][3] = state[2][3];
    state[2][3] = state[1][3];
    state[1][3] = temp;
}

static uint8_t xtime_hls(uint8_t x)
{
     return (x << 1) ^ (((x >> 7) & 1) * 0x1b);
}


static void MixColumns_hls(uint8_t state[4][4])
{
  uint8_t i;
  uint8_t Tmp;
  uint8_t Tm;
  uint8_t t;
  for (i = 0; i < 4; ++i)
  {
    t = state[i][0];
    Tmp = state[i][0] ^ state[i][1] ^ state[i][2] ^ state[i][3];
    Tm = state[i][0] ^ state[i][1];
    Tm = xtime_hls(Tm);
    state[i][0] ^= Tm ^ Tmp;
    Tm = state[i][1] ^ state[i][2];
    Tm = xtime_hls(Tm);
    state[i][1] ^= Tm ^ Tmp;
    Tm = state[i][2] ^ state[i][3];
    Tm = xtime_hls(Tm);
    state[i][2] ^= Tm ^ Tmp;
    Tm = state[i][3] ^ t;
    Tm = xtime_hls(Tm);
    state[i][3] ^= Tm ^ Tmp;
  }
}


void Cipher_hls(uint8_t state[4][4], const uint8_t RoundKey[176])
{
  uint8_t round;
  AddRoundKey_hls(0, state, RoundKey);
  for (round = 1;; ++round)
  {
    SubBytes_hls(state);
    ShiftRows_hls(state);
    if (round == 10)
    {
      break;
    }
    MixColumns_hls(state);
    AddRoundKey_hls(round, state, RoundKey);
  }
  AddRoundKey_hls(10, state, RoundKey);
}

